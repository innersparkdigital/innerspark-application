/**
 * Report Detail Screen - Detailed view of weekly wellness report sections
 */
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Share,
  Alert,
  Dimensions,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Icon, Button } from '@rneui/base';
import { appColors, parameters, appFonts } from '../../global/Styles';
import { useToast } from 'native-base';
import { NavigationProp, RouteProp } from '@react-navigation/native';

interface ReportDetailScreenProps {
  navigation: NavigationProp<any>;
  route: RouteProp<{ params: { reportId: string; section: string } }, 'params'>;
}

const { width: SCREEN_WIDTH } = Dimensions.get('window');

const ReportDetailScreen: React.FC<ReportDetailScreenProps> = ({ navigation, route }) => {
  const { reportId, section } = route.params;
  const toast = useToast();
  const [selectedTab, setSelectedTab] = useState(section || 'mood');

  const tabs = [
    { key: 'mood', label: 'Mood Trends', icon: 'mood' },
    { key: 'journaling', label: 'Journaling', icon: 'edit' },
    { key: 'activities', label: 'Activities', icon: 'local-activity' },
    { key: 'recommendations', label: 'Recommendations', icon: 'psychology' },
  ];

  const handleShare = async () => {
    try {
      await Share.share({
        message: `My Weekly Wellness Report - ${selectedTab} section\n\nGenerated by Innerspark`,
        title: 'Weekly Wellness Report',
      });
    } catch (error) {
      toast.show({
        description: 'Failed to share report',
        duration: 2000,
      });
    }
  };

  const handleEmail = () => {
    Alert.alert(
      'Email Report Section',
      `Send the ${selectedTab} section to your email?`,
      [
        { text: 'Cancel', style: 'cancel' },
        { 
          text: 'Send', 
          onPress: () => {
            toast.show({
              description: 'Report section sent to your email!',
              duration: 3000,
            });
          }
        }
      ]
    );
  };

  const MoodTrendsDetail: React.FC = () => (
    <View style={styles.detailSection}>
      <Text style={styles.sectionTitle}>Mood Trends Analysis</Text>
      
      <View style={styles.trendCard}>
        <Text style={styles.cardTitle}>Weekly Overview</Text>
        <Text style={styles.cardDescription}>
          Your mood showed an improving trend this week with an average rating of 3.8/5.
          You completed 6 out of 7 daily check-ins, maintaining a strong consistency.
        </Text>
        
        <View style={styles.detailMetrics}>
          <View style={styles.detailMetric}>
            <Text style={styles.metricValue}>3.8/5</Text>
            <Text style={styles.metricLabel}>Average Mood</Text>
          </View>
          <View style={styles.detailMetric}>
            <Text style={styles.metricValue}>6/7</Text>
            <Text style={styles.metricLabel}>Check-ins</Text>
          </View>
          <View style={styles.detailMetric}>
            <Text style={styles.metricValue}>↗️</Text>
            <Text style={styles.metricLabel}>Trending Up</Text>
          </View>
        </View>
      </View>

      <View style={styles.insightsCard}>
        <Text style={styles.cardTitle}>Key Insights</Text>
        <View style={styles.insightsList}>
          <Text style={styles.insightItem}>• Your mood was highest on weekends</Text>
          <Text style={styles.insightItem}>• Tuesday showed the most improvement</Text>
          <Text style={styles.insightItem}>• Evening check-ins were more positive</Text>
        </View>
      </View>
    </View>
  );

  const JournalingDetail: React.FC = () => (
    <View style={styles.detailSection}>
      <Text style={styles.sectionTitle}>Journaling Analysis</Text>
      
      <View style={styles.trendCard}>
        <Text style={styles.cardTitle}>Writing Patterns</Text>
        <View style={styles.detailMetrics}>
          <View style={styles.detailMetric}>
            <Text style={styles.metricValue}>6</Text>
            <Text style={styles.metricLabel}>Total Entries</Text>
          </View>
          <View style={styles.detailMetric}>
            <Text style={styles.metricValue}>85</Text>
            <Text style={styles.metricLabel}>Avg Words</Text>
          </View>
          <View style={styles.detailMetric}>
            <Text style={styles.metricValue}>72%</Text>
            <Text style={styles.metricLabel}>Positive</Text>
          </View>
        </View>
      </View>

      <View style={styles.themesCard}>
        <Text style={styles.cardTitle}>Common Themes</Text>
        <View style={styles.themesList}>
          <View style={styles.themeItem}>
            <Text style={styles.themeName}>Gratitude</Text>
            <Text style={styles.themeCount}>4 mentions</Text>
          </View>
          <View style={styles.themeItem}>
            <Text style={styles.themeName}>Work Stress</Text>
            <Text style={styles.themeCount}>3 mentions</Text>
          </View>
          <View style={styles.themeItem}>
            <Text style={styles.themeName}>Family Time</Text>
            <Text style={styles.themeCount}>5 mentions</Text>
          </View>
        </View>
      </View>
    </View>
  );

  const ActivitiesDetail: React.FC = () => (
    <View style={styles.detailSection}>
      <Text style={styles.sectionTitle}>Activities & Goals</Text>
      
      <View style={styles.achievementsCard}>
        <Text style={styles.cardTitle}>This Week's Achievements</Text>
        <View style={styles.achievementsList}>
          <View style={styles.achievementItem}>
            <Icon name="check-circle" type="material" color="#4CAF50" size={20} />
            <Text style={styles.achievementText}>6-day mood tracking streak</Text>
          </View>
          <View style={styles.achievementItem}>
            <Icon name="check-circle" type="material" color="#4CAF50" size={20} />
            <Text style={styles.achievementText}>First week of consistent journaling</Text>
          </View>
        </View>
      </View>

      <View style={styles.goalsCard}>
        <Text style={styles.cardTitle}>Upcoming Goals</Text>
        <View style={styles.goalsList}>
          <Text style={styles.goalItem}>• Complete 7-day streak</Text>
          <Text style={styles.goalItem}>• Try group therapy session</Text>
          <Text style={styles.goalItem}>• Practice daily meditation</Text>
        </View>
      </View>
    </View>
  );

  const RecommendationsDetail: React.FC = () => (
    <View style={styles.detailSection}>
      <Text style={styles.sectionTitle}>Personalized Recommendations</Text>
      
      <View style={styles.recommendationsCard}>
        <Text style={styles.cardTitle}>Based on Your Progress</Text>
        <View style={styles.recommendationsList}>
          <View style={styles.recommendationItem}>
            <Icon name="psychology" type="material" color={appColors.AppBlue} size={20} />
            <Text style={styles.recommendationText}>
              Continue your positive mood trend with morning affirmations
            </Text>
          </View>
          <View style={styles.recommendationItem}>
            <Icon name="local-activity" type="material" color="#FF9800" size={20} />
            <Text style={styles.recommendationText}>
              Try our new mindfulness workshop this weekend
            </Text>
          </View>
          <View style={styles.recommendationItem}>
            <Icon name="people" type="material" color="#9C27B0" size={20} />
            <Text style={styles.recommendationText}>
              Join a support group to connect with others
            </Text>
          </View>
        </View>
      </View>
    </View>
  );

  const renderContent = () => {
    switch (selectedTab) {
      case 'mood':
        return <MoodTrendsDetail />;
      case 'journaling':
        return <JournalingDetail />;
      case 'activities':
        return <ActivitiesDetail />;
      case 'recommendations':
        return <RecommendationsDetail />;
      default:
        return <MoodTrendsDetail />;
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <TouchableOpacity 
          style={styles.backButton}
          onPress={() => navigation.goBack()}
        >
          <Icon name="arrow-back" type="material" color={appColors.grey1} size={24} />
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Report Details</Text>
        <View style={styles.headerActions}>
          <TouchableOpacity style={styles.actionButton} onPress={handleShare}>
            <Icon name="share" type="material" color={appColors.AppBlue} size={20} />
          </TouchableOpacity>
          <TouchableOpacity style={styles.actionButton} onPress={handleEmail}>
            <Icon name="email" type="material" color={appColors.AppBlue} size={20} />
          </TouchableOpacity>
        </View>
      </View>

      {/* Tab Bar */}
      <View style={styles.tabBar}>
        <ScrollView horizontal showsHorizontalScrollIndicator={false}>
          {tabs.map((tab) => (
            <TouchableOpacity
              key={tab.key}
              style={[styles.tab, selectedTab === tab.key && styles.activeTab]}
              onPress={() => setSelectedTab(tab.key)}
            >
              <Icon 
                name={tab.icon} 
                type="material" 
                color={selectedTab === tab.key ? appColors.AppBlue : appColors.grey3} 
                size={18} 
              />
              <Text style={[
                styles.tabText,
                selectedTab === tab.key && styles.activeTabText
              ]}>
                {tab.label}
              </Text>
            </TouchableOpacity>
          ))}
        </ScrollView>
      </View>

      {/* Content */}
      <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
        {renderContent()}
        <View style={styles.bottomSpacing} />
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: appColors.AppLightGray,
  },
  header: {
    backgroundColor: appColors.CardBackground,
    paddingTop: parameters.headerHeightS,
    paddingBottom: 15,
    paddingHorizontal: 20,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  backButton: {
    padding: 8,
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: appColors.grey1,
    fontFamily: appFonts.headerTextBold,
    flex: 1,
    textAlign: 'center',
  },
  headerActions: {
    flexDirection: 'row',
  },
  actionButton: {
    padding: 8,
    marginLeft: 8,
  },
  tabBar: {
    backgroundColor: appColors.CardBackground,
    paddingVertical: 10,
    elevation: 1,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 1,
  },
  tab: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 8,
    marginHorizontal: 4,
    borderRadius: 20,
  },
  activeTab: {
    backgroundColor: appColors.AppBlue + '15',
  },
  tabText: {
    fontSize: 12,
    color: appColors.grey3,
    fontFamily: appFonts.headerTextRegular,
    marginLeft: 6,
  },
  activeTabText: {
    color: appColors.AppBlue,
    fontWeight: 'bold',
    fontFamily: appFonts.headerTextBold,
  },
  scrollView: {
    flex: 1,
  },
  detailSection: {
    padding: 20,
  },
  sectionTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: appColors.grey1,
    fontFamily: appFonts.headerTextBold,
    marginBottom: 20,
  },
  trendCard: {
    backgroundColor: appColors.CardBackground,
    borderRadius: 16,
    padding: 20,
    marginBottom: 16,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  cardTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: appColors.grey1,
    fontFamily: appFonts.headerTextBold,
    marginBottom: 12,
  },
  cardDescription: {
    fontSize: 14,
    color: appColors.grey2,
    fontFamily: appFonts.headerTextRegular,
    lineHeight: 20,
    marginBottom: 16,
  },
  detailMetrics: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  detailMetric: {
    alignItems: 'center',
  },
  metricValue: {
    fontSize: 20,
    fontWeight: 'bold',
    color: appColors.AppBlue,
    fontFamily: appFonts.headerTextBold,
  },
  metricLabel: {
    fontSize: 12,
    color: appColors.grey3,
    fontFamily: appFonts.headerTextRegular,
    marginTop: 4,
    textAlign: 'center',
  },
  insightsCard: {
    backgroundColor: appColors.CardBackground,
    borderRadius: 16,
    padding: 20,
    marginBottom: 16,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  insightsList: {
    marginTop: 8,
  },
  insightItem: {
    fontSize: 14,
    color: appColors.grey2,
    fontFamily: appFonts.headerTextRegular,
    lineHeight: 22,
    marginBottom: 4,
  },
  themesCard: {
    backgroundColor: appColors.CardBackground,
    borderRadius: 16,
    padding: 20,
    marginBottom: 16,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  themesList: {
    marginTop: 8,
  },
  themeItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: appColors.grey6,
  },
  themeName: {
    fontSize: 16,
    color: appColors.grey1,
    fontFamily: appFonts.headerTextMedium,
  },
  themeCount: {
    fontSize: 14,
    color: appColors.grey3,
    fontFamily: appFonts.headerTextRegular,
  },
  achievementsCard: {
    backgroundColor: appColors.CardBackground,
    borderRadius: 16,
    padding: 20,
    marginBottom: 16,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  achievementsList: {
    marginTop: 8,
  },
  achievementItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  achievementText: {
    fontSize: 14,
    color: appColors.grey2,
    fontFamily: appFonts.headerTextRegular,
    marginLeft: 12,
    flex: 1,
  },
  goalsCard: {
    backgroundColor: appColors.CardBackground,
    borderRadius: 16,
    padding: 20,
    marginBottom: 16,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  goalsList: {
    marginTop: 8,
  },
  goalItem: {
    fontSize: 14,
    color: appColors.grey2,
    fontFamily: appFonts.headerTextRegular,
    lineHeight: 22,
    marginBottom: 4,
  },
  recommendationsCard: {
    backgroundColor: appColors.CardBackground,
    borderRadius: 16,
    padding: 20,
    marginBottom: 16,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
  },
  recommendationsList: {
    marginTop: 8,
  },
  recommendationItem: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    marginBottom: 16,
  },
  recommendationText: {
    fontSize: 14,
    color: appColors.grey2,
    fontFamily: appFonts.headerTextRegular,
    marginLeft: 12,
    flex: 1,
    lineHeight: 20,
  },
  bottomSpacing: {
    height: 20,
  },
});

export default ReportDetailScreen;
